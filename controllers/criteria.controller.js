require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
let router = express.Router();
let mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
const request = require('request');
const isNotValidObjectId = require('../utils/helpers');
const TopicSchema = require('../models/tobic.model').TopicSchema;
const { InteractiveObjectTypeSchema } = require('../models/object-types.model');
const { interactiveQuizSchema } = require('../models/interactive-quiz.model');
const {
    interactiveObjectSchema,
} = require('../models/interactive-object.model');
const interactiveObjectModel = require('../models/interactive-object.model');
const { CriteriaSchema } = require('../models/criteria.model');

router.post('/criteria/use-in-quiz/:quizId', async (req, res) => {
    if (isNotValidObjectId(req.params.quizId))
        return res.status(404).json('Invalid ID');

    /**  firstly create the criterias */
    const criterias = [];
    for (const area of req.body.areas) {
        if (area.topicId === 'new') {
            // then create a new topic
            const { title, domainId, domainName, subDomainId, subDomainName } =
                area.topic;

            topic = await new TopicSchema({
                title,
                domainId,
                domainName,
                subDomainId,
                subDomainName,
            }).save();

            area.topicId = topic.id;

            // Then we add the questions to current topic
            const selectedQuestionsIds = area.selectedQuestions.split(',');
            // Convert string IDs to ObjectId if necessary
            const objectIds = selectedQuestionsIds.map((id) =>
                mongoose.Types.ObjectId(id)
            );
            interactiveObjectSchema
                .find({ _id: { $in: objectIds } })
                .then(async (docs) => {
                    for (const q of docs) {
                        const question = await interactiveObjectSchema.findById(
                            q._id
                        );

                        if (!question) continue;

                        question.topicId = topic._id;
                        question.topicTitle = topic.title;
                        await question.save();
                    }
                });
        }

        criteria = await new CriteriaSchema({
            ...area,
        }).save();

        criterias.push(criteria);
    }

    /** secondly add the criterias to the quiz */
    let obj = await interactiveQuizSchema.findById(req.params.quizId);
    obj.criterias = criterias.map((x) => x._id);
    obj.isAutoGenerated = true;
    await obj.save();

    return res.json(obj);
});

module.exports = router;
